#!/usr/bin/env python3
"""
–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π RADXA TX12 –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º CRSF –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
–û—Å–Ω–æ–≤–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π CRSF header —Ç–∞ –∞–¥—Ä–µ—Å–∞—Ü—ñ—è
2. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø–∞–∫—É–≤–∞–Ω–Ω—è 11-–±—ñ—Ç–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
3. –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π CRC8 DVB-S2
4. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Betaflight
"""

import serial
import time
import struct
import signal
import sys
import threading
import atexit
import os
from typing import List, Optional

try:
    from evdev import InputDevice, categorize, ecodes, list_devices
    EVDEV_AVAILABLE = True
except ImportError:
    print("‚ùå ERROR: evdev library not found!")
    print("Install with: sudo apt update && sudo apt install python3-evdev")
    sys.exit(1)

# CRSF Protocol Constants - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–ù–ê–ß–ï–ù–ù–Ø
CRSF_SYNC_BYTE = 0xC8                    # –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π sync byte
CRSF_FRAMETYPE_RC_CHANNELS_PACKED = 0x16
CRSF_FRAME_SIZE_RC_CHANNELS = 22         # –†–æ–∑–º—ñ—Ä payload –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤
CRSF_HEADER_SIZE = 2                     # Device address + Frame length

# CRSF Channel Values - –ü–†–ê–í–ò–õ–¨–ù–Ü –î–Ü–ê–ü–ê–ó–û–ù–ò
CRSF_CHANNEL_MIN = 172
CRSF_CHANNEL_CENTER = 992
CRSF_CHANNEL_MAX = 1811
CRSF_CHANNEL_RANGE = CRSF_CHANNEL_MAX - CRSF_CHANNEL_MIN

# RADXA UART –ø–æ—Ä—Ç–∏
RADXA_UART_PORTS = [
    "/dev/ttyUSB0",  # USB-UART –∞–¥–∞–ø—Ç–µ—Ä–∏
    "/dev/ttyUSB1", 
    "/dev/ttyACM0",  # Arduino-—Å—É–º—ñ—Å–Ω—ñ
    "/dev/ttyS1",    # –ù–∞—Ç–∏–≤–Ω—ñ UART
    "/dev/ttyS2",
    "/dev/ttyFIQ0",
]

# TX12 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (—Å–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
TX12_AXIS_MAPPING = {
    ecodes.ABS_X: {'channel': 0, 'name': 'Roll', 'invert': False},
    ecodes.ABS_Y: {'channel': 1, 'name': 'Pitch', 'invert': True},
    ecodes.ABS_Z: {'channel': 2, 'name': 'Throttle', 'invert': False},
    ecodes.ABS_RX: {'channel': 3, 'name': 'Yaw', 'invert': False},
}

class CRSFController:
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π CRSF –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä"""
    
    def __init__(self, uart_port: Optional[str] = None, baudrate: int = 115200):
        self.uart = None
        self.tx12_device = None
        self.running = False
        
        self.uart_port = uart_port
        self.uart_baudrate = baudrate
        
        # 16 –∫–∞–Ω–∞–ª—ñ–≤ - –í–ê–ñ–õ–ò–í–û: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
        self.channels = [CRSF_CHANNEL_CENTER] * 16
        self.channels[2] = CRSF_CHANNEL_MIN  # Throttle –Ω–∞ –º—ñ–Ω—ñ–º—É–º
        
        self.packets_sent = 0
        self.last_input_time = time.time()
        
        # CRC8 —Ç–∞–±–ª–∏—Ü—è –¥–ª—è DVB-S2
        self.crc8_table = self._generate_crc8_table()
        
        atexit.register(self.cleanup)
        signal.signal(signal.SIGINT, self.signal_handler)
        
        print("üéÆ CRSF Controller initialized")
    
    def _generate_crc8_table(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CRC8 —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è DVB-S2 (0xD5 –ø–æ–ª—ñ–Ω–æ–º)"""
        table = []
        for i in range(256):
            crc = i
            for _ in range(8):
                if crc & 0x80:
                    crc = ((crc << 1) ^ 0xD5) & 0xFF
                else:
                    crc = (crc << 1) & 0xFF
            table.append(crc)
        return table
    
    def _calculate_crc8(self, data: bytes) -> int:
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ CRC8 DVB-S2"""
        crc = 0
        for byte in data:
            crc = self.crc8_table[crc ^ byte]
        return crc
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
        print(f"\nüõë Stopping controller...")
        self.cleanup()
        sys.exit(0)
    
    def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è"""
        self.running = False
        
        if self.tx12_device:
            try:
                self.tx12_device.close()
            except:
                pass
        
        if self.uart and self.uart.is_open:
            try:
                # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ failsafe
                self.send_failsafe()
                time.sleep(0.1)
                self.uart.close()
                print("‚úÖ UART closed")
            except:
                pass
    
    def send_failsafe(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–µ–∑–ø–µ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è"""
        try:
            safe_channels = [CRSF_CHANNEL_CENTER] * 16
            safe_channels[2] = CRSF_CHANNEL_MIN  # Throttle
            
            temp = self.channels
            self.channels = safe_channels
            packet = self.build_crsf_packet()
            
            if self.uart and self.uart.is_open:
                self.uart.write(packet)
                self.uart.flush()
            
            self.channels = temp
            print("üì° Failsafe sent")
        except:
            pass
    
    def find_uart_port(self) -> Optional[str]:
        """–ó–Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π UART –ø–æ—Ä—Ç"""
        print("üîç Scanning UART ports...")
        
        for port in RADXA_UART_PORTS:
            try:
                if not os.path.exists(port):
                    continue
                
                test_serial = serial.Serial(
                    port=port,
                    baudrate=self.uart_baudrate,
                    timeout=0.1
                )
                test_serial.close()
                
                print(f"‚úÖ Found: {port}")
                return port
                
            except Exception as e:
                print(f"‚ùå {port}: {e}")
        
        return None
    
    def setup_uart(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UART"""
        if not self.uart_port:
            self.uart_port = self.find_uart_port()
            if not self.uart_port:
                return False
        
        print(f"üîå Setting up UART: {self.uart_port} @ {self.uart_baudrate}")
        
        try:
            self.uart = serial.Serial(
                port=self.uart_port,
                baudrate=self.uart_baudrate,
                bytesize=8,
                parity='N',
                stopbits=1,
                timeout=0.01,
                write_timeout=0.05,
                xonxoff=False,
                rtscts=False,
                dsrdtr=False
            )
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ –±—É—Ñ–µ—Ä–∏
            self.uart.reset_input_buffer()
            self.uart.reset_output_buffer()
            
            print(f"‚úÖ UART ready")
            return True
            
        except Exception as e:
            print(f"‚ùå UART setup failed: {e}")
            return False
    
    def find_tx12(self) -> Optional[str]:
        """–ó–Ω–∞–π—Ç–∏ TX12"""
        print("üîç Searching for TX12...")
        
        for path in list_devices():
            try:
                device = InputDevice(path)
                name_lower = device.name.lower()
                
                print(f"  üì± {device.name}")
                
                if any(pattern in name_lower for pattern in ['radiomaster', 'tx12', 'opentx']):
                    print(f"‚úÖ TX12 found: {device.path}")
                    return device.path
                    
            except Exception as e:
                print(f"  ‚ùå Error: {e}")
        
        print("‚ùå TX12 not found!")
        return None
    
    def setup_tx12(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TX12"""
        device_path = self.find_tx12()
        if not device_path:
            return False
        
        try:
            self.tx12_device = InputDevice(device_path)
            print(f"‚úÖ TX12 opened: {self.tx12_device.name}")
            return True
        except Exception as e:
            print(f"‚ùå TX12 setup failed: {e}")
            return False
    
    def convert_to_crsf(self, raw_value: int, axis_config: dict) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å –≤ CRSF"""
        # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω -32768 –¥–æ 32767 –¥–ª—è –¥–∂–æ–π—Å—Ç–∏–∫–∞
        input_min = -32768
        input_max = 32767
        input_center = 0
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ 0.0-1.0
        if raw_value <= input_center:
            normalized = 0.5 * (raw_value - input_min) / (input_center - input_min)
        else:
            normalized = 0.5 + 0.5 * (raw_value - input_center) / (input_max - input_center)
        
        # –Ü–Ω–≤–µ—Ä—Å—ñ—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if axis_config.get('invert', False):
            normalized = 1.0 - normalized
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è
        normalized = max(0.0, min(1.0, normalized))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ CRSF –¥—ñ–∞–ø–∞–∑–æ–Ω
        crsf_value = int(CRSF_CHANNEL_MIN + normalized * CRSF_CHANNEL_RANGE)
        
        return max(CRSF_CHANNEL_MIN, min(CRSF_CHANNEL_MAX, crsf_value))
    
    def process_tx12_event(self, event):
        """–û–±—Ä–æ–±–∫–∞ TX12 –ø–æ–¥—ñ–π"""
        self.last_input_time = time.time()
        
        if event.type == ecodes.EV_ABS and event.code in TX12_AXIS_MAPPING:
            axis_config = TX12_AXIS_MAPPING[event.code]
            channel_idx = axis_config['channel']
            
            old_value = self.channels[channel_idx]
            new_value = self.convert_to_crsf(event.value, axis_config)
            self.channels[channel_idx] = new_value
            
            # –õ–æ–≥ –∑–Ω–∞—á–Ω–∏—Ö –∑–º—ñ–Ω
            if abs(old_value - new_value) > 10:
                percent = ((new_value - CRSF_CHANNEL_MIN) / CRSF_CHANNEL_RANGE) * 100
                print(f"üïπÔ∏è  {axis_config['name']:8} ‚Üí {new_value:4d} ({percent:5.1f}%) [raw: {event.value:6d}]")
    
    def build_crsf_packet(self) -> bytes:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ CRSF –ø–∞–∫–µ—Ç—É"""
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ payload
        payload = bytearray()
        
        # –£–ø–∞–∫—É–≤–∞–Ω–Ω—è 16 –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ 11 –±—ñ—Ç –∫–æ–∂–µ–Ω
        bits_buffer = 0
        bits_count = 0
        
        for channel in self.channels:
            # –û–±–º–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
            channel = max(CRSF_CHANNEL_MIN, min(CRSF_CHANNEL_MAX, channel))
            
            # –î–æ–¥–∞—Ç–∏ 11 –±—ñ—Ç –¥–æ –±—É—Ñ–µ—Ä—É
            bits_buffer |= (channel << bits_count)
            bits_count += 11
            
            # –í–∏—Ç—è–≥—Ç–∏ –ø–æ–≤–Ω—ñ –±–∞–π—Ç–∏
            while bits_count >= 8:
                payload.append(bits_buffer & 0xFF)
                bits_buffer >>= 8
                bits_count -= 8
        
        # –î–æ–¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –±—ñ—Ç–∏ —è–∫—â–æ —î
        if bits_count > 0:
            payload.append(bits_buffer & 0xFF)
        
        # –û–±—Ä—ñ–∑–∞—Ç–∏ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É (22 –±–∞–π—Ç–∏)
        payload = payload[:CRSF_FRAME_SIZE_RC_CHANNELS]
        
        # –ü–æ–±—É–¥–æ–≤–∞ —Ñ—Ä–µ–π–º—É
        frame = bytearray()
        frame.append(CRSF_SYNC_BYTE)                    # Sync byte
        frame.append(CRSF_FRAME_SIZE_RC_CHANNELS + 2)   # Frame length (payload + type + crc)
        frame.append(CRSF_FRAMETYPE_RC_CHANNELS_PACKED) # Frame type
        frame.extend(payload)                           # Payload
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ CRC8 (–≤—ñ–¥ frame type –¥–æ –∫—ñ–Ω—Ü—è payload)
        crc_data = frame[2:]  # –í—ñ–¥ frame type
        crc = self._calculate_crc8(crc_data)
        frame.append(crc)
        
        return bytes(frame)
    
    def send_channels(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤"""
        try:
            packet = self.build_crsf_packet()
            if self.uart and self.uart.is_open:
                self.uart.write(packet)
                self.packets_sent += 1
                
        except Exception as e:
            print(f"‚ùå Send error: {e}")
    
    def print_channels(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∫–∞–Ω–∞–ª–∏"""
        print(f"\nüìã Current Channels:")
        channel_names = ['Roll', 'Pitch', 'Throttle', 'Yaw']
        
        for i, (name, value) in enumerate(zip(channel_names, self.channels[:4])):
            percent = ((value - CRSF_CHANNEL_MIN) / CRSF_CHANNEL_RANGE) * 100
            print(f"   Ch{i+1} {name:8}: {value:4d} ({percent:5.1f}%)")
        
        print(f"   üì° Packets sent: {self.packets_sent}")
    
    def tx12_loop(self):
        """TX12 —á–∏—Ç–∞–Ω–Ω—è"""
        while self.running:
            try:
                if self.tx12_device:
                    events = self.tx12_device.read()
                    for event in events:
                        if event.type == ecodes.EV_ABS:
                            self.process_tx12_event(event)
            except BlockingIOError:
                pass
            except Exception as e:
                print(f"‚ùå TX12 error: {e}")
                break
            
            time.sleep(0.001)
    
    def main_loop(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        print(f"üöÄ Starting CRSF ‚Üí Flight Controller")
        print(f"üì° UART: {self.uart_port} @ {self.uart_baudrate}")
        print(f"üìä Send rate: 50 Hz")
        print(f"üéÆ Ready for input!")
        
        # –ó–∞–ø—É—Å–∫ TX12 –ø–æ—Ç–æ–∫—É
        tx12_thread = threading.Thread(target=self.tx12_loop, daemon=True)
        tx12_thread.start()
        
        last_send_time = 0
        last_stats_time = 0
        send_interval = 1.0 / 50  # 50 Hz
        
        try:
            while self.running:
                current_time = time.time()
                
                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤
                if current_time - last_send_time >= send_interval:
                    self.send_channels()
                    last_send_time = current_time
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if current_time - last_stats_time >= 5.0:
                    self.print_channels()
                    last_stats_time = current_time
                
                time.sleep(0.001)
                
        except KeyboardInterrupt:
            print(f"\nüõë Stopping...")
        finally:
            self.cleanup()
    
    def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫"""
        print("üîß Initializing CRSF Controller...")
        
        if not self.setup_uart():
            return False
            
        if not self.setup_tx12():
            return False
        
        self.running = True
        print("‚úÖ Controller ready!")
        return True

def test_crsf_without_tx12():
    """–¢–µ—Å—Ç CRSF –±–µ–∑ TX12 - –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß™ Testing CRSF output without TX12...")
    
    controller = CRSFController()
    
    if not controller.setup_uart():
        print("‚ùå UART setup failed")
        return
    
    print("üì° Sending test CRSF packets...")
    print("   Check Betaflight Configurator Receiver tab")
    
    controller.running = True
    
    try:
        for i in range(1000):  # 20 —Å–µ–∫—É–Ω–¥ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            # –¢–µ—Å—Ç–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            controller.channels[0] = CRSF_CHANNEL_CENTER + int(500 * (i % 100 - 50) / 50)  # Roll
            controller.channels[1] = CRSF_CHANNEL_CENTER  # Pitch
            controller.channels[2] = CRSF_CHANNEL_MIN     # Throttle
            controller.channels[3] = CRSF_CHANNEL_CENTER  # Yaw
            
            controller.send_channels()
            
            if i % 50 == 0:  # –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
                print(f"üìä Sent {i+1} packets, Roll: {controller.channels[0]}")
            
            time.sleep(0.02)  # 50 Hz
            
    except KeyboardInterrupt:
        print("\nüõë Test stopped")
    finally:
        controller.cleanup()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Fixed CRSF Controller')
    parser.add_argument('--uart', type=str, help='UART port')
    parser.add_argument('--baudrate', type=int, default=115200, help='Baudrate')
    parser.add_argument('--test', action='store_true', help='Test mode without TX12')
    
    args = parser.parse_args()
    
    if args.test:
        test_crsf_without_tx12()
        return
    
    controller = CRSFController(uart_port=args.uart, baudrate=args.baudrate)
    
    if controller.start():
        controller.main_loop()
    else:
        print("‚ùå Failed to start controller")
        print("\nüí° Try test mode: python3 script.py --test")

if __name__ == "__main__":
    main()