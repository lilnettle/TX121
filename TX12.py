import socket
import time
import threading
from evdev import InputDevice, categorize, ecodes, list_devices

# == –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è RadioMaster TX12 ==
UDP_IP = "192.168.42.1"
UDP_PORT = 6969
SEND_RATE_HZ = 66
FAILSAFE_TIMEOUT = 2.0  # —Å–µ–∫—É–Ω–¥–∏

# == CRSF –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ==
CRSF_ADDRESS = 0xC8
CRSF_TYPE_RC_CHANNELS_PACKED = 0x16
CRSF_CHANNEL_MIN = 172
CRSF_CHANNEL_MID = 992
CRSF_CHANNEL_MAX = 1811

class RadioMasterTX12Controller:
    def __init__(self):
        self.channels = [CRSF_CHANNEL_MID] * 16
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.running = False
        self.last_input = time.time()
        self.dev = None
        
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–µ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è RadioMaster TX12
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ Mode 2 –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–≥–∞–∑ –∑–ª—ñ–≤–∞)
        self.axis_map = {
            ecodes.ABS_X: 0,      # Aileron (Roll) - –ø—Ä–∞–≤–∏–π —Å—Ç—ñ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            ecodes.ABS_Y: 1,      # Elevator (Pitch) - –ø—Ä–∞–≤–∏–π —Å—Ç—ñ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
            ecodes.ABS_Z: 2,      # Throttle (–ì–∞–∑) - –ª—ñ–≤–∏–π —Å—Ç—ñ–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
            ecodes.ABS_RZ: 3,     # Rudder (Yaw) - –ª—ñ–≤–∏–π —Å—Ç—ñ–∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            ecodes.ABS_RX: 4,     # Aux 1 - –ø–æ—Ç–µ–Ω—Ü—ñ–æ–º–µ—Ç—Ä –∞–±–æ —Å–ª–∞–π–¥–µ—Ä
            ecodes.ABS_RY: 5,     # Aux 2 - –ø–æ—Ç–µ–Ω—Ü—ñ–æ–º–µ—Ç—Ä –∞–±–æ —Å–ª–∞–π–¥–µ—Ä
        }
        
        # –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ —Ç–∞ –∫–Ω–æ–ø–∫–∏ TX12
        self.switch_map = {
            ecodes.BTN_TRIGGER: 6,    # SA –ø–µ—Ä–µ–º–∏–∫–∞—á (2-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π)
            ecodes.BTN_THUMB: 7,      # SB –ø–µ—Ä–µ–º–∏–∫–∞—á (3-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π)
            ecodes.BTN_THUMB2: 8,     # SC –ø–µ—Ä–µ–º–∏–∫–∞—á (3-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π)
            ecodes.BTN_TOP: 9,        # SD –ø–µ—Ä–µ–º–∏–∫–∞—á (2-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π)
            ecodes.BTN_TOP2: 10,      # SE –ø–µ—Ä–µ–º–∏–∫–∞—á
            ecodes.BTN_PINKIE: 11,    # SF –ø–µ—Ä–µ–º–∏–∫–∞—á
            ecodes.BTN_BASE: 12,      # SG –ø–µ—Ä–µ–º–∏–∫–∞—á
            ecodes.BTN_BASE2: 13,     # SH –ø–µ—Ä–µ–º–∏–∫–∞—á
        }
        
        # –°—Ç–∞–Ω –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤ –¥–ª—è 3-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏—Ö
        self.switch_states = {}
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–∏–≤–∏—Ö —Ç–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ç–∏
        self.expo_settings = {
            0: 0.2,  # Roll expo
            1: 0.2,  # Pitch expo
            2: 0.0,  # Throttle (–ª—ñ–Ω—ñ–π–Ω–∏–π)
            3: 0.2,  # Yaw expo
        }
        
    def find_tx12_device(self):
        """–°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –ø–æ—à—É–∫ RadioMaster TX12"""
        target_names = [
            "TX12", "RADIOMASTER", "RADIOMASTER TX12", 
            "FRSKY", "TARANIS", "JOYSTICK"
        ]
        
        for path in list_devices():
            try:
                d = InputDevice(path)
                device_name = d.name.upper()
                
                if any(name in device_name for name in target_names):
                    print(f"üéÆ –ó–Ω–∞–π–¥–µ–Ω–æ RadioMaster TX12: {d.name} ({path})")
                    
                    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ—Å–µ–π —Ç–∞ –∫–Ω–æ–ø–æ–∫
                    caps = d.capabilities()
                    if ecodes.EV_ABS in caps:
                        axes = [ecodes.ABS[ax[0]] for ax in caps[ecodes.EV_ABS]]
                        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω—ñ –æ—Å—ñ: {', '.join(axes)}")
                    
                    if ecodes.EV_KEY in caps:
                        buttons = len(caps[ecodes.EV_KEY])
                        print(f"   üîò –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫: {buttons}")
                    
                    return d
                    
            except (OSError, PermissionError) as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ {path}: {e}")
                continue
                
        return None
    
    def apply_expo(self, value, expo):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–æ—ó –∫—Ä–∏–≤–æ—ó"""
        if expo == 0:
            return value
            
        # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É -1 –¥–æ 1
        normalized = (value - CRSF_CHANNEL_MID) / (CRSF_CHANNEL_MAX - CRSF_CHANNEL_MID)
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ç–∏
        sign = 1 if normalized >= 0 else -1
        abs_val = abs(normalized)
        expo_val = (1 - expo) * abs_val + expo * (abs_val ** 3)
        
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ CRSF –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        result = int(expo_val * sign * (CRSF_CHANNEL_MAX - CRSF_CHANNEL_MID) + CRSF_CHANNEL_MID)
        return max(CRSF_CHANNEL_MIN, min(CRSF_CHANNEL_MAX, result))
    
    def crsf_crc8(self, data):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ CRC8 –¥–ª—è CRSF"""
        crc = 0
        for b in data:
            crc ^= b
            for _ in range(8):
                crc = ((crc << 1) ^ 0xD5) & 0xFF if (crc & 0x80) else (crc << 1) & 0xFF
        return crc
    
    def scale_axis(self, val, channel_idx, invert=False):
        """–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∏ TX12"""
        if invert:
            val = -val
            
        # –ë–∞–∑–æ–≤–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        scaled = int(((val + 32768) / 65535.0) * (CRSF_CHANNEL_MAX - CRSF_CHANNEL_MIN) + CRSF_CHANNEL_MIN)
        scaled = max(CRSF_CHANNEL_MIN, min(CRSF_CHANNEL_MAX, scaled))
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –µ–∫—Å–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –æ—Å–µ–π
        if channel_idx in self.expo_settings:
            scaled = self.apply_expo(scaled, self.expo_settings[channel_idx])
            
        return scaled
    
    def pack_crsf_channels(self, ch):
        """–£–ø–∞–∫—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤ —É CRSF —Ñ–æ—Ä–º–∞—Ç"""
        buf = 0
        bits = 0
        packed = bytearray()
        
        for val in ch:
            val = max(CRSF_CHANNEL_MIN, min(CRSF_CHANNEL_MAX, val))
            buf |= (val & 0x7FF) << bits
            bits += 11
            
            while bits >= 8:
                packed.append(buf & 0xFF)
                buf >>= 8
                bits -= 8
                
        return packed[:22]
    
    def build_crsf_packet(self):
        """–ü–æ–±—É–¥–æ–≤–∞ CRSF –ø–∞–∫–µ—Ç—É"""
        payload = self.pack_crsf_channels(self.channels)
        frame = bytearray([CRSF_ADDRESS, CRSF_TYPE_RC_CHANNELS_PACKED, len(payload)])
        frame.extend(payload)
        frame.append(self.crsf_crc8(frame[2:]))
        return frame
    
    def apply_failsafe(self):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞—Ö–∏—Å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å"""
        print("‚ö†Ô∏è  –í—Ç—Ä–∞—Ç–∞ –∑–≤'—è–∑–∫—É –∑ TX12 - –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∑–∞—Ö–∏—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")
        
        # –ì–∞–∑ –Ω–∞ –º—ñ–Ω—ñ–º—É–º (–≤–∞–∂–ª–∏–≤–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏!)
        self.channels[2] = CRSF_CHANNEL_MIN
        
        # –Ü–Ω—à—ñ –∫–∞–Ω–∞–ª–∏ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è
        for i in [0, 1, 3]:  # Roll, Pitch, Yaw
            self.channels[i] = CRSF_CHANNEL_MID
            
        # Aux –∫–∞–Ω–∞–ª–∏ –≤ –±–µ–∑–ø–µ—á–Ω—ñ –ø–æ–ª–æ–∂–µ–Ω–Ω—è
        for i in range(4, 16):
            self.channels[i] = CRSF_CHANNEL_MIN
    
    def transmit_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–¥–∞—á—ñ"""
        interval = 1.0 / SEND_RATE_HZ
        packet_count = 0
        
        while self.running:
            start_time = time.time()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç—É
            if time.time() - self.last_input > FAILSAFE_TIMEOUT:
                self.apply_failsafe()
            
            # –ü–µ—Ä–µ–¥–∞—á–∞ –ø–∞–∫–µ—Ç—É
            try:
                packet = self.build_crsf_packet()
                self.sock.sendto(packet, (UDP_IP, UDP_PORT))
                packet_count += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
                if packet_count % (SEND_RATE_HZ * 5) == 0:
                    print(f"üì° –ü–µ—Ä–µ–¥–∞–Ω–æ {packet_count} –ø–∞–∫–µ—Ç—ñ–≤")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–¥–∞—á—ñ: {e}")
            
            # –ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏
            elapsed = time.time() - start_time
            sleep_time = max(0, interval - elapsed)
            time.sleep(sleep_time)
    
    def process_input(self, event):
        """–û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –∑ TX12"""
        self.last_input = time.time()
        
        if event.type == ecodes.EV_ABS and event.code in self.axis_map:
            ch = self.axis_map[event.code]
            
            # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è TX12
            invert = False
            if event.code == ecodes.ABS_Y:  # Elevator –∑–∞–∑–≤–∏—á–∞–π —ñ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π
                invert = True
            elif event.code == ecodes.ABS_Z:  # Throttle –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ —ñ–Ω–≤–µ—Ä—Å—ñ—ó
                invert = False  # –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å TX12
                
            self.channels[ch] = self.scale_axis(event.value, ch, invert)
            
        elif event.type == ecodes.EV_KEY and event.code in self.switch_map:
            ch = self.switch_map[event.code]
            
            # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤
            if event.value == 1:  # –ù–∞—Ç–∏—Å–Ω—É—Ç–æ
                self.channels[ch] = CRSF_CHANNEL_MAX
            elif event.value == 0:  # –í—ñ–¥–ø—É—â–µ–Ω–æ
                self.channels[ch] = CRSF_CHANNEL_MIN
            else:  # –°–µ—Ä–µ–¥–Ω—î –ø–æ–ª–æ–∂–µ–Ω–Ω—è –¥–ª—è 3-–ø–æ–∑–∏—Ü—ñ–π–Ω–∏—Ö
                self.channels[ch] = CRSF_CHANNEL_MID
    
    def print_status(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–∞–Ω–∞–ª—ñ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–∞–Ω–∞–ª–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        main_channels = f"A:{self.channels[0]:4d} E:{self.channels[1]:4d} T:{self.channels[2]:4d} R:{self.channels[3]:4d}"
        
        # Aux –∫–∞–Ω–∞–ª–∏
        aux_channels = " ".join(f"AUX{i-3}:{self.channels[i]:4d}" for i in range(4, 8))
        
        print(f"\r{main_channels} | {aux_channels}", end="", flush=True)
    
    def calibrate_sticks(self):
        """–ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ—Ü–µ—Å –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è"""
        print("üéØ –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è —Å—Ç—ñ–∫—ñ–≤ TX12...")
        print("   –†—É—Ö–∞–π—Ç–µ –≤—Å—ñ —Å—Ç—ñ–∫–∏ —É –∫—Ä–∞–π–Ω—ñ –ø–æ–ª–æ–∂–µ–Ω–Ω—è —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter")
        input("   –ì–æ—Ç–æ–≤–æ? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
        print("‚úÖ –ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏"""
        print("üöÅ RadioMaster TX12 ‚Üí CRSF UDP Bridge")
        print("=" * 50)
        
        self.dev = self.find_tx12_device()
        if not self.dev:
            print("‚ùå RadioMaster TX12 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ:")
            print("   - TX12 –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ USB")
            print("   - –£–≤—ñ–º–∫–Ω–µ–Ω–∏–π —Ä–µ–∂–∏–º –¥–∂–æ–π—Å—Ç–∏–∫–∞ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö")
            print("   - –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏ (sudo –∞–±–æ –≥—Ä—É–ø–∞ input)")
            return
        
        # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è
        if input("–í–∏–∫–æ–Ω–∞—Ç–∏ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è? (y/N): ").lower() == 'y':
            self.calibrate_sticks()
        
        print(f"üì° –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–∞ {UDP_IP}:{UDP_PORT} –∑ —á–∞—Å—Ç–æ—Ç–æ—é {SEND_RATE_HZ}–ì—Ü")
        print("üìä –†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: A=Aileron E=Elevator T=Throttle R=Rudder")
        print("üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫—É –ø–µ—Ä–µ–¥–∞—á—ñ
        tx_thread = threading.Thread(target=self.transmit_loop, daemon=True)
        tx_thread.start()
        
        try:
            status_counter = 0
            for event in self.dev.read_loop():
                if not self.running:
                    break
                    
                self.process_input(event)
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                status_counter += 1
                if status_counter >= 50:  # –ß–∞—Å—Ç—ñ—à–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è TX12
                    self.print_status()
                    status_counter = 0
                    
        except KeyboardInterrupt:
            print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä–µ–¥–∞—á—ñ...")
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        finally:
            self.running = False
            self.sock.close()
            print("üëã –í–∏–º–∫–Ω–µ–Ω–æ")

if __name__ == "__main__":
    controller = RadioMasterTX12Controller()
    controller.run()