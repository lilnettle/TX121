#!/usr/bin/env python3
"""
–§—ñ–Ω–∞–ª—å–Ω–∏–π CRSF —Ç–µ—Å—Ç –ø—ñ—Å–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ CLI
"""

import serial
import time
import sys

def generate_crc8_table():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è CRC8 —Ç–∞–±–ª–∏—Ü—ñ DVB-S2"""
    table = []
    for i in range(256):
        crc = i
        for _ in range(8):
            if crc & 0x80:
                crc = ((crc << 1) ^ 0xD5) & 0xFF
            else:
                crc = (crc << 1) & 0xFF
        table.append(crc)
    return table

def calculate_crc8(data, table):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ CRC8 DVB-S2"""
    crc = 0
    for byte in data:
        crc = table[crc ^ byte]
    return crc

def create_final_crsf_packet(roll=1500, pitch=1500, throttle=1000, yaw=1500):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CRSF –ø–∞–∫–µ—Ç"""
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ CRSF –¥—ñ–∞–ø–∞–∑–æ–Ω (172-1811)
    def to_crsf(val):
        if val < 1000:
            return 172
        elif val > 2000:
            return 1811
        else:
            return int(172 + (val - 1000) * (1811 - 172) / 1000)
    
    channels = [
        to_crsf(roll), to_crsf(pitch), to_crsf(throttle), to_crsf(yaw),
        to_crsf(1500), to_crsf(1500), to_crsf(1500), to_crsf(1500),
        to_crsf(1500), to_crsf(1500), to_crsf(1500), to_crsf(1500),
        to_crsf(1500), to_crsf(1500), to_crsf(1500), to_crsf(1500)
    ]
    
    # –£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤ (176 –±—ñ—Ç = 22 –±–∞–π—Ç–∏)
    payload = bytearray(22)
    bit_offset = 0
    
    for channel in channels:
        channel &= 0x7FF  # 11 –±—ñ—Ç
        
        # –ó–∞–ø–∏—Å–∞—Ç–∏ –±—ñ—Ç–∏ –≤ little-endian –ø–æ—Ä—è–¥–∫—É (—è–∫ –≤ Betaflight)
        for bit_idx in range(11):
            if channel & (1 << bit_idx):
                byte_idx = bit_offset // 8
                bit_pos = bit_offset % 8
                if byte_idx < 22:
                    payload[byte_idx] |= (1 << bit_pos)
            bit_offset += 1
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—Ä–µ–π–º
    frame = bytearray()
    frame.append(0xC8)  # CRSF_ADDRESS_FLIGHT_CONTROLLER
    frame.append(24)    # Frame Length (22 + 1 type + 1 crc)
    frame.append(0x16)  # CRSF_FRAMETYPE_RC_CHANNELS_PACKED
    frame.extend(payload)
    
    # CRC8
    crc_table = generate_crc8_table()
    crc = calculate_crc8(frame[2:], crc_table)
    frame.append(crc)
    
    return bytes(frame), channels

def check_cli_setup():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ CLI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω—ñ"""
    print("üîß CLI SETUP VERIFICATION")
    print("=" * 40)
    print("Before running this test, make sure you executed in Betaflight CLI:")
    print()
    print("üìã Required CLI commands:")
    print("   set serialrx_provider = CRSF")
    print("   serial 1 64 115200 57600 0 420000")
    print("   save")
    print()
    print("üîç Then verify with:")
    print("   get serialrx_provider")
    print("   serial")
    print()
    
    response = input("‚ùì Have you executed these CLI commands? (y/n): ")
    if response.lower() != 'y':
        print("‚ùå Please run CLI commands first!")
        sys.exit(1)

def test_crsf_final():
    """–§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç CRSF"""
    
    # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–±–∏–¥–≤–∞ –º–æ–∂–ª–∏–≤—ñ –ø–æ—Ä—Ç–∏
    ports_to_try = [
        ("/dev/ttyUSB0", "USB0 - might be UART0"),
        ("/dev/ttyUSB1", "USB1 - might be UART1"),
        ("/dev/ttyACM0", "ACM0 - alternative USB"),
    ]
    
    for port, description in ports_to_try:
        print(f"\nüß™ Testing {port} ({description})")
        print("-" * 40)
        
        try:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ 420000 baud (CRSF —à–≤–∏–¥–∫—ñ—Å—Ç—å)
            ser = serial.Serial(port, 420000, timeout=0.01)
            print(f"‚úÖ Opened {port} at 420000 baud")
            
            print("üì° Sending CRSF test sequence...")
            
            # –¢–µ—Å—Ç–æ–≤–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å
            test_sequence = [
                (1000, 1500, 1000, 1500, "Roll MIN"),
                (1500, 1500, 1000, 1500, "Center"),  
                (2000, 1500, 1000, 1500, "Roll MAX"),
                (1500, 1500, 1000, 1500, "Center"),
                (1500, 1000, 1000, 1500, "Pitch MIN"),
                (1500, 1500, 1000, 1500, "Center"),
                (1500, 2000, 1000, 1500, "Pitch MAX"),
                (1500, 1500, 1000, 1500, "Center"),
            ]
            
            for roll, pitch, throttle, yaw, name in test_sequence:
                packet, channels = create_final_crsf_packet(roll, pitch, throttle, yaw)
                
                print(f"  üéÆ {name:10} | Roll:{channels[0]:4d} Pitch:{channels[1]:4d}")
                
                # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç 100 —Ä–∞–∑—ñ–≤ (2 —Å–µ–∫—É–Ω–¥–∏)
                for _ in range(100):
                    ser.write(packet)
                    time.sleep(0.02)
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
            
            ser.close()
            
            response = input(f"  ‚ùì Did you see channels moving in Receiver tab? (y/n): ")
            if response.lower() == 'y':
                print(f"  üéâ SUCCESS! CRSF working on {port}")
                return True, port
            else:
                print(f"  ‚ùå No movement on {port}")
                
        except Exception as e:
            print(f"  ‚ùå Failed to test {port}: {e}")
    
    return False, None

def main():
    print("üöÄ FINAL CRSF TEST")
    print("=" * 50)
    print("This test assumes you've configured Betaflight CLI properly")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ CLI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    check_cli_setup()
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Å—Ç
    success, working_port = test_crsf_final()
    
    if success:
        print(f"\nüéâ CRSF IS WORKING!")
        print(f"   Working port: {working_port}")
        print(f"   Baud rate: 420000")
        print(f"   Protocol: CRSF")
        print(f"\n‚úÖ You can now use this setup for your FPV simulator!")
        
        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ç–µ—Å—Ç
        cont = input(f"\n‚ùì Run continuous test? (y/n): ")
        if cont.lower() == 'y':
            run_continuous_test(working_port)
    else:
        print(f"\n‚ùå CRSF still not working")
        print(f"\nüîç Additional troubleshooting:")
        print(f"   1. Double-check CLI commands")
        print(f"   2. Verify physical UART1 connection")
        print(f"   3. Try different FC UART ports")
        print(f"   4. Check FC pinout diagram")

def run_continuous_test(port):
    """–ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print(f"\nüéÆ CONTINUOUS CRSF TEST on {port}")
    print("Press Ctrl+C to stop")
    print("-" * 30)
    
    try:
        ser = serial.Serial(port, 420000, timeout=0.01)
        cycle = 0
        
        while True:
            cycle += 1
            
            # –¶–∏–∫–ª –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏
            phase = (cycle // 150) % 4
            
            if phase == 0:
                packet, ch = create_final_crsf_packet(1000, 1500, 1000, 1500)
                state = "ROLL_MIN "
            elif phase == 1:
                packet, ch = create_final_crsf_packet(2000, 1500, 1000, 1500)
                state = "ROLL_MAX "
            elif phase == 2:
                packet, ch = create_final_crsf_packet(1500, 1000, 1000, 1500)
                state = "PITCH_MIN"
            else:
                packet, ch = create_final_crsf_packet(1500, 2000, 1000, 1500)
                state = "PITCH_MAX"
            
            ser.write(packet)
            
            if cycle % 25 == 0:
                print(f"\rüéÆ {state} | R:{ch[0]:4d} P:{ch[1]:4d} T:{ch[2]:4d} Y:{ch[3]:4d} | "
                      f"Cycle:{cycle:4d}", end="", flush=True)
            
            time.sleep(0.02)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  Continuous test stopped")
        ser.close()

if __name__ == "__main__":
    main()