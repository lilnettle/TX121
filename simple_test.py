#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π CRSF —Ç–µ—Å—Ç - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–∞–∫–µ—Ç–∏ –Ω–∞ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–æ—Ä—Ç–∏
"""

import serial
import time
import os

def find_all_ports():
    """–ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ—Ä—Ç–∏"""
    ports = []
    # –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ UART –ø–æ—Ä—Ç–∏
    candidates = [
        "/dev/ttyUSB0", "/dev/ttyUSB1", "/dev/ttyUSB2", "/dev/ttyUSB3",
        "/dev/ttyACM0", "/dev/ttyACM1", "/dev/ttyACM2", "/dev/ttyACM3",
        "/dev/ttyS0", "/dev/ttyS1", "/dev/ttyS2", "/dev/ttyS3",
        "/dev/ttyAMA0", "/dev/ttyAMA1", "/dev/ttyFIQ0"
    ]
    
    for port in candidates:
        if os.path.exists(port):
            ports.append(port)
            
    return ports

def create_simple_crsf_packet():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π CRSF –ø–∞–∫–µ—Ç"""
    # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –ø–∞–∫–µ—Ç –∑ –≤—ñ–¥–æ–º–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    packet = bytearray([
        0xC8,  # Sync byte
        0x18,  # Length (24)
        0x16,  # RC Channels type
        # 22 –±–∞–π—Ç–∏ payload (–≤—Å—ñ –∫–∞–Ω–∞–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ)
        0x00, 0x04, 0x20, 0x00, 0x04, 0x20, 0x00, 0x04, 
        0x20, 0x00, 0x04, 0x20, 0x00, 0x04, 0x20, 0x00, 
        0x04, 0x20, 0x00, 0x04, 0x20, 0x00,
        0x00   # CRC (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
    ])
    
    # –ü—Ä–æ—Å—Ç–∏–π CRC
    crc = 0
    for byte in packet[2:-1]:  # –í—ñ–¥ type –¥–æ –∫—ñ–Ω—Ü—è payload
        crc ^= byte
        
    packet[-1] = crc
    return bytes(packet)

def test_port(port):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç—É"""
    try:
        print(f"\nüß™ Testing {port}...")
        
        ser = serial.Serial(
            port=port,
            baudrate=115200,
            timeout=0.1
        )
        
        packet = create_simple_crsf_packet()
        
        print(f"   ‚úÖ Port opened")
        print(f"   üì° Sending CRSF packets...")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ 100 –ø–∞–∫–µ—Ç—ñ–≤
        for i in range(100):
            ser.write(packet)
            time.sleep(0.02)  # 50 Hz
            
        print(f"   üì¶ Sent 100 packets")
        ser.close()
        return True
        
    except Exception as e:
        print(f"   ‚ùå Failed: {e}")
        return False

def main():
    print("üöÄ Simple CRSF Port Scanner")
    print("=" * 40)
    
    ports = find_all_ports()
    
    if not ports:
        print("‚ùå No UART ports found!")
        return
        
    print(f"üì° Found {len(ports)} ports:")
    for port in ports:
        print(f"   {port}")
    
    print(f"\nüß™ Testing each port...")
    print(f"   Watch Betaflight Receiver tab for movement")
    
    working_ports = []
    
    for port in ports:
        if test_port(port):
            working_ports.append(port)
            
        # –ü–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(1)
    
    print(f"\nüìä Results:")
    print(f"   Working ports: {len(working_ports)}")
    
    if working_ports:
        print(f"   ‚úÖ Successfully tested:")
        for port in working_ports:
            print(f"      {port}")
        print(f"\nüí° If any channels moved in Betaflight, that port works!")
    else:
        print(f"   ‚ùå No ports responded")
        print(f"\nüîß Check:")
        print(f"      1. Physical wiring (TX‚ÜíRX, GND‚ÜíGND)")
        print(f"      2. Betaflight Serial Rx configuration")
        print(f"      3. Voltage levels (3.3V compatibility)")

if __name__ == "__main__":
    main()