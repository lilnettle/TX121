#!/usr/bin/env python3
"""
CRSF Bridge –∑ OSD –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è–º: USB1 ‚Üí USB0 + –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è ‚Üí OSD ‚Üí HDMI
"""

import serial
import time
import threading
import logging
import subprocess
import os
from dataclasses import dataclass
from typing import Optional, Dict
from enum import IntEnum

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

@dataclass
class TelemetryData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó –¥–ª—è OSD"""
    voltage: float = 0.0          # –í–æ–ª—å—Ç–∞–∂ –±–∞—Ç–∞—Ä–µ—ó (V)
    current: float = 0.0          # –°—Ç—Ä—É–º (A)
    fuel: int = 0                 # –ó–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ—ó (%)
    gps_lat: float = 0.0          # GPS —à–∏—Ä–æ—Ç–∞
    gps_lon: float = 0.0          # GPS –¥–æ–≤–≥–æ—Ç–∞
    gps_alt: float = 0.0          # GPS –≤–∏—Å–æ—Ç–∞ (m)
    gps_speed: float = 0.0        # GPS —à–≤–∏–¥–∫—ñ—Å—Ç—å (km/h)
    gps_sats: int = 0             # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É–ø—É—Ç–Ω–∏–∫—ñ–≤
    rssi: int = 0                 # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª—É
    link_quality: int = 0         # –Ø–∫—ñ—Å—Ç—å –∑–≤'—è–∑–∫—É (%)
    flight_mode: str = "ACRO"     # –†–µ–∂–∏–º –ø–æ–ª—å–æ—Ç—É
    armed: bool = False           # –û–∑–±—Ä–æ—î–Ω–Ω—è
    failsafe: bool = False        # Failsafe —Å—Ç–∞–Ω

class PacketsTypes(IntEnum):
    """CRSF —Ç–∏–ø–∏ –ø–∞–∫–µ—Ç—ñ–≤"""
    GPS = 0x02
    VARIO = 0x07
    BATTERY_SENSOR = 0x08
    BARO_ALT = 0x09
    HEARTBEAT = 0x0B
    VIDEO_TRANSMITTER = 0x0F
    LINK_STATISTICS = 0x14
    RC_CHANNELS_PACKED = 0x16
    ATTITUDE = 0x1E
    FLIGHT_MODE = 0x21
    DEVICE_INFO = 0x29
    CONFIG_READ = 0x2C
    CONFIG_WRITE = 0x2D
    RADIO_ID = 0x3A

def crc8_dvb_s2(crc, a) -> int:
    """CRC8 –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–ª—è CRSF"""
    crc = crc ^ a
    for ii in range(8):
        if crc & 0x80:
            crc = (crc << 1) ^ 0xD5
        else:
            crc = crc << 1
    return crc & 0xFF

def crc8_data(data) -> int:
    """CRC8 –¥–ª—è –º–∞—Å–∏–≤—É –¥–∞–Ω–∏—Ö"""
    crc = 0
    for a in data:
        crc = crc8_dvb_s2(crc, a)
    return crc

def crsf_validate_frame(frame) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CRC —Ñ—Ä–µ–π–º—É"""
    return crc8_data(frame[2:-1]) == frame[-1]

def signed_byte(b):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –∑–Ω–∞–∫–æ–≤–∏–π –±–∞–π—Ç"""
    return b - 256 if b >= 128 else b

class CRSFParser:
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π CRSF –ø–∞—Ä—Å–µ—Ä –Ω–∞ –±–∞–∑—ñ –≤–∞—à–æ–≥–æ –ø—Ä–∏–∫–ª–∞–¥—É"""
    
    CRSF_SYNC = 0xC8
    
    def __init__(self):
        self.input_buffer = bytearray()
        self.telemetry = TelemetryData()
    
    def add_data(self, data: bytes) -> bool:
        """–î–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ –¥–æ –±—É—Ñ–µ—Ä—É —Ç–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏"""
        self.input_buffer.extend(data)
        parsed = False
        
        while len(self.input_buffer) > 2:
            expected_len = self.input_buffer[1] + 2
            if expected_len > 64 or expected_len < 4:
                self.input_buffer = bytearray()
                break
            elif len(self.input_buffer) >= expected_len:
                single_packet = self.input_buffer[:expected_len]
                self.input_buffer = self.input_buffer[expected_len:]
                
                if not crsf_validate_frame(single_packet):
                    packet_hex = ' '.join(map(hex, single_packet))
                    logging.debug(f"CRC error: {packet_hex}")
                else:
                    if self._handle_crsf_packet(single_packet[2], single_packet):
                        parsed = True
            else:
                break
        
        return parsed
    
    def _handle_crsf_packet(self, ptype, data) -> bool:
        """–û–±—Ä–æ–±–∫–∞ CRSF –ø–∞–∫–µ—Ç—É (–±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –≤–∞—à–æ–º—É –∫–æ–¥—ñ)"""
        try:
            if ptype == PacketsTypes.GPS:
                lat = int.from_bytes(data[3:7], byteorder='big', signed=True) / 1e7
                lon = int.from_bytes(data[7:11], byteorder='big', signed=True) / 1e7
                gspd = int.from_bytes(data[11:13], byteorder='big', signed=True) / 36.0  # m/s
                hdg = int.from_bytes(data[13:15], byteorder='big', signed=True) / 100.0
                alt = int.from_bytes(data[15:17], byteorder='big', signed=True) - 1000
                sats = data[17]
                
                self.telemetry.gps_lat = lat
                self.telemetry.gps_lon = lon
                self.telemetry.gps_speed = gspd * 3.6  # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è m/s –≤ km/h
                self.telemetry.gps_alt = alt
                self.telemetry.gps_sats = sats
                
                logging.debug(f"GPS: Pos={lat:.6f} {lon:.6f} GSpd={gspd:.1f}m/s Alt={alt}m Sats={sats}")
                
            elif ptype == PacketsTypes.VARIO:
                vspd = int.from_bytes(data[3:5], byteorder='big', signed=True) / 10.0
                logging.debug(f"VSpd: {vspd:.1f}m/s")
                
            elif ptype == PacketsTypes.ATTITUDE:
                pitch = int.from_bytes(data[3:5], byteorder='big', signed=True) / 10000.0
                roll = int.from_bytes(data[5:7], byteorder='big', signed=True) / 10000.0
                yaw = int.from_bytes(data[7:9], byteorder='big', signed=True) / 10000.0
                logging.debug(f"Attitude: Pitch={pitch:.2f} Roll={roll:.2f} Yaw={yaw:.2f} (rad)")
                
            elif ptype == PacketsTypes.BARO_ALT:
                alt = int.from_bytes(data[3:7], byteorder='big', signed=True) / 100.0
                logging.debug(f"Baro Altitude: {alt}m")
                
            elif ptype == PacketsTypes.LINK_STATISTICS:
                rssi1 = signed_byte(data[3])
                rssi2 = signed_byte(data[4])
                lq = data[5]
                snr = signed_byte(data[6])
                
                self.telemetry.rssi = rssi1  # –û—Å–Ω–æ–≤–Ω–∏–π RSSI
                self.telemetry.link_quality = lq
                
                logging.debug(f"RSSI={rssi1}/{rssi2}dBm LQ={lq:03d} SNR={snr}")
                
            elif ptype == PacketsTypes.BATTERY_SENSOR:
                vbat = int.from_bytes(data[3:5], byteorder='big', signed=True) / 10.0
                curr = int.from_bytes(data[5:7], byteorder='big', signed=True) / 10.0
                mah = data[7] << 16 | data[8] << 8 | data[9]
                pct = data[10]
                
                self.telemetry.voltage = vbat
                self.telemetry.current = curr
                self.telemetry.fuel = pct
                
                logging.debug(f"Battery: {vbat:.2f}V {curr:.1f}A {mah}mAh {pct}%")
                
            elif ptype == PacketsTypes.FLIGHT_MODE:
                # Flight mode –∑–∞–∑–≤–∏—á–∞–π –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ —Ä—è–¥–æ–∫
                try:
                    mode_str = data[3:].decode('utf-8', errors='ignore').strip('\x00')
                    if mode_str:
                        self.telemetry.flight_mode = mode_str
                        logging.debug(f"Flight Mode: {mode_str}")
                except:
                    pass
            
            return True
            
        except Exception as e:
            logging.error(f"CRSF packet parse error: {e}")
            return False

class OSDManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä OSD –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ GStreamer"""
    
    def __init__(self, camera_ip: str = "192.168.0.100"):
        self.camera_ip = camera_ip
        self.telemetry = TelemetryData()
        self.gst_process = None
        self.osd_fifo = "/tmp/osd_overlay.txt"
        self.running = False
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ FIFO –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ OSD —Ç–µ–∫—Å—Ç—É
        self._create_fifo()
    
    def _create_fifo(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ FIFO —Ñ–∞–π–ª –¥–ª—è OSD"""
        try:
            if os.path.exists(self.osd_fifo):
                os.unlink(self.osd_fifo)
            os.mkfifo(self.osd_fifo)
            logging.info(f"üìÑ Created OSD FIFO: {self.osd_fifo}")
        except Exception as e:
            logging.error(f"Failed to create FIFO: {e}")
    
    def update_telemetry(self, telemetry: TelemetryData):
        """–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó"""
        self.telemetry = telemetry
        self._update_osd_text()
    
    def _update_osd_text(self):
        """–û–Ω–æ–≤–∏—Ç–∏ OSD —Ç–µ–∫—Å—Ç —É FIFO"""
        try:
            osd_text = self._format_osd_text()
            with open(self.osd_fifo, 'w', encoding='utf-8') as f:
                f.write(osd_text + '\n')
        except Exception as e:
            logging.debug(f"OSD update error: {e}")
    
    def _format_osd_text(self) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ OSD —Ç–µ–∫—Å—Ç"""
        # –û—Å–Ω–æ–≤–Ω–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—è
        lines = [
            f"üîã {self.telemetry.voltage:.1f}V {self.telemetry.fuel}%",
            f"‚ö° {self.telemetry.current:.1f}A",
        ]
        
        # RSSI —Ç–∞ Link Quality (RSSI –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π)
        rssi_display = self.telemetry.rssi if self.telemetry.rssi >= 0 else self.telemetry.rssi
        lines.append(f"üì° RSSI: {rssi_display}dBm LQ: {self.telemetry.link_quality}%")
        
        # –†–µ–∂–∏–º –ø–æ–ª—å–æ—Ç—É
        lines.append(f"üõ©Ô∏è  {self.telemetry.flight_mode} {'üî¥ARMED' if self.telemetry.armed else '‚ö™DISARMED'}")
        
        # GPS —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        if self.telemetry.gps_sats > 0:
            lines.extend([
                f"üõ∞Ô∏è  GPS: {self.telemetry.gps_sats} sats",
                f"üìç {self.telemetry.gps_lat:.6f}, {self.telemetry.gps_lon:.6f}",
                f"üìè Alt: {self.telemetry.gps_alt:.0f}m Speed: {self.telemetry.gps_speed:.1f}km/h"
            ])
        else:
            lines.append("üõ∞Ô∏è  No GPS")
        
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if self.telemetry.failsafe:
            lines.append("‚ö†Ô∏è  FAILSAFE!")
        
        return '\n'.join(lines)
    
    def start_gstreamer(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ GStreamer pipeline"""
        if self.gst_process:
            return
        
        # GStreamer pipeline –∑ RTSP, OSD –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è–º —Ç–∞ HDMI –≤–∏–≤–æ–¥–æ–º
        pipeline = [
            'gst-launch-1.0',
            '-v',
            # RTSP –¥–∂–µ—Ä–µ–ª–æ
            f'rtspsrc', f'location=rtsp://{self.camera_ip}:554/stream', 'latency=50', '!',
            'rtph264depay', '!',
            'h264parse', '!',
            'avdec_h264', '!',
            'videoconvert', '!',
            
            # –ù–∞–∫–ª–∞–¥–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
            'textoverlay',
            f'text-file={self.osd_fifo}',
            'valignment=top',
            'halignment=left',
            'font-desc="Monospace Bold 14"',
            'color=0xFFFFFFFF',  # –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
            'outline-color=0xFF000000',  # –ß–æ—Ä–Ω–∏–π –∫–æ–Ω—Ç—É—Ä
            'silent=false',
            'auto-resize=false', '!',
            
            # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è HDMI
            'videoscale', '!',
            'video/x-raw,width=1920,height=1080', '!',
            'videoconvert', '!',
            
            # –í–∏–≤—ñ–¥ –Ω–∞ HDMI —á–µ—Ä–µ–∑ kmssink
            'kmssink',
            'connector-id=32',  # –ú–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            'sync=false'
        ]
        
        try:
            logging.info("üé¨ Starting GStreamer pipeline...")
            logging.info(f"üì∫ Camera: rtsp://{self.camera_ip}:554/stream")
            logging.info("üñ•Ô∏è  Output: HDMI via kmssink")
            
            self.gst_process = subprocess.Popen(
                pipeline,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            
            self.running = True
            logging.info("‚úÖ GStreamer started")
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start GStreamer: {e}")
            self.gst_process = None
    
    def stop_gstreamer(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ GStreamer"""
        if self.gst_process:
            self.gst_process.terminate()
            try:
                self.gst_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.gst_process.kill()
            self.gst_process = None
            self.running = False
            logging.info("‚èπÔ∏è GStreamer stopped")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ FIFO
        if os.path.exists(self.osd_fifo):
            os.unlink(self.osd_fifo)

class EnhancedCRSFBridge:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π CRSF Bridge –∑ OSD —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é"""
    
    def __init__(self, camera_ip: str = "192.168.0.100"):
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è bridge
        self.rx_port = "/dev/ttyUSB1"  # RX –ø—Ä–∏–π–º–∞—á
        self.fc_port = "/dev/ttyUSB0"  # FC
        self.baud_rate = 420000
        self.fallback_baud = 115200
        
        self.rx_serial = None
        self.fc_serial = None
        self.running = False
        
        self.stats = {'rx_packets': 0, 'fc_packets': 0, 'errors': 0}
        
        # OSD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
        self.crsf_parser = CRSFParser()
        self.osd_manager = OSDManager(camera_ip)
        self.last_telemetry_update = time.time()
    
    def connect(self):
        """–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fallback"""
        for baud in [self.baud_rate, self.fallback_baud]:
            try:
                logging.info(f"üîå Trying {baud} baud...")
                
                self.rx_serial = serial.Serial(self.rx_port, baud, timeout=0.01)
                self.fc_serial = serial.Serial(self.fc_port, baud, timeout=0.01)
                
                logging.info(f"‚úÖ Connected at {baud} baud")
                logging.info(f"üì° Bridge: {self.rx_port} ‚Üí {self.fc_port}")
                return True
                
            except Exception as e:
                logging.error(f"‚ùå Failed at {baud}: {e}")
                self.disconnect()
        
        return False
    
    def disconnect(self):
        """–í—ñ–¥–∫–ª—é—á–∏—Ç–∏"""
        if self.rx_serial:
            self.rx_serial.close()
            self.rx_serial = None
        if self.fc_serial:
            self.fc_serial.close()
            self.fc_serial = None
    
    def bridge_thread(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ bridge –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó"""
        logging.info("üîÑ Bridge thread started")
        
        while self.running:
            try:
                # USB1 ‚Üí USB0 (RX ‚Üí FC)
                if self.rx_serial.in_waiting > 0:
                    data = self.rx_serial.read(self.rx_serial.in_waiting)
                    self.fc_serial.write(data)
                    self.stats['rx_packets'] += len(data)
                
                # USB0 ‚Üí USB1 (FC ‚Üí RX, —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—è)
                if self.fc_serial.in_waiting > 0:
                    data = self.fc_serial.read(self.fc_serial.in_waiting)
                    self.rx_serial.write(data)
                    self.stats['fc_packets'] += len(data)
                    
                    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó –∑ FC
                    if self.crsf_parser.add_data(data):
                        self.osd_manager.update_telemetry(self.crsf_parser.telemetry)
                        self.last_telemetry_update = time.time()
                
                time.sleep(0.001)  # 1ms
                
            except Exception as e:
                logging.error(f"‚ùå Bridge error: {e}")
                self.stats['errors'] += 1
                time.sleep(0.01)
    
    def stats_thread(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—î—é"""
        while self.running:
            time.sleep(5)
            telem = self.crsf_parser.telemetry
            telemetry_age = time.time() - self.last_telemetry_update
            
            logging.info(f"üìä RX‚ÜíFC: {self.stats['rx_packets']} bytes | "
                        f"FC‚ÜíRX: {self.stats['fc_packets']} bytes | "
                        f"Errors: {self.stats['errors']}")
            
            if telemetry_age < 5:
                logging.info(f"üì° Telemetry: {telem.voltage:.1f}V, "
                           f"RSSI: {telem.rssi}, LQ: {telem.link_quality}%, "
                           f"GPS: {telem.gps_sats} sats, Mode: {telem.flight_mode}")
            else:
                logging.warning("‚ö†Ô∏è  No recent telemetry data")
    
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ bridge —Ç–∞ OSD"""
        if not self.connect():
            return False
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ GStreamer OSD
        self.osd_manager.start_gstreamer()
        time.sleep(2)  # –î–∞—Ç–∏ —á–∞—Å GStreamer –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è
        
        self.running = True
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ–∫–∏
        self.bridge_th = threading.Thread(target=self.bridge_thread, daemon=True)
        self.stats_th = threading.Thread(target=self.stats_thread, daemon=True)
        
        self.bridge_th.start()
        self.stats_th.start()
        
        logging.info("üöÄ Enhanced Bridge with OSD running!")
        return True
    
    def stop(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ bridge —Ç–∞ OSD"""
        self.running = False
        time.sleep(0.1)
        
        # –ó—É–ø–∏–Ω–∏—Ç–∏ OSD
        self.osd_manager.stop_gstreamer()
        
        # –ó—É–ø–∏–Ω–∏—Ç–∏ bridge
        self.disconnect()
        logging.info("‚èπÔ∏è Enhanced Bridge stopped")

def main():
    print("üåâ ENHANCED CRSF BRIDGE + OSD")
    print("=" * 50)
    print("Configuration:")
    print("  RX Input:     /dev/ttyUSB1")
    print("  FC Output:    /dev/ttyUSB0")
    print("  Camera IP:    192.168.0.100")
    print("  Video Stream: RTSP ‚Üí HDMI (kmssink)")
    print("  OSD:          CRSF Telemetry Overlay")
    print("  Baud:         420000 (fallback to 115200)")
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—é—Ç—å –ø–æ—Ä—Ç–∏
    if not os.path.exists("/dev/ttyUSB0"):
        print("‚ùå /dev/ttyUSB0 not found!")
        return
    if not os.path.exists("/dev/ttyUSB1"):
        print("‚ùå /dev/ttyUSB1 not found!")
        return
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    camera_ip = input("üì∑ Camera IP (default: 192.168.0.100): ").strip()
    if not camera_ip:
        camera_ip = "192.168.0.100"
    
    ready = input("‚ùì Start bridge with OSD? (y/n): ")
    if ready.lower() != 'y':
        return
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ enhanced bridge
    bridge = EnhancedCRSFBridge(camera_ip)
    
    try:
        if bridge.start():
            print("‚úÖ Enhanced Bridge running!")
            print("üì∫ Video with OSD should appear on HDMI")
            print("üìä Statistics every 5 seconds")
            print("Press Ctrl+C to stop")
            
            while True:
                time.sleep(1)
        else:
            print("‚ùå Failed to start bridge")
    
    except KeyboardInterrupt:
        print("\nüõë Stopping...")
        bridge.stop()
        print("‚úÖ Stopped")

if __name__ == "__main__":
    main()