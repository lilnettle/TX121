#include <iostream>
#include <string>
#include <thread>
#include <chrono>
#include <atomic>
#include <memory>
#include <cstring>
#include <csignal>
#include <vector>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <linux/serial.h>

// Boost.Asio
#include <boost/asio.hpp>
#include <boost/asio/serial_port.hpp>
#include <boost/bind.hpp>
#include <boost/system/error_code.hpp>

// GStreamer
#include <gst/gst.h>
#include <glib.h>

using namespace boost::asio;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const std::string RTSP_URL = "rtsp://root:12345@192.168.0.100:554/stream1";
const std::string RX_PORT = "/dev/ttyUSB1";   // RX –ø—Ä–∏–π–º–∞—á
const std::string FC_PORT = "/dev/ttyUSB0";   // FC
const int CRSF_BAUD = 420000;  // –ö–∞—Å—Ç–æ–º–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å CRSF

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π CRSF Bridge –∑ Boost.Asio
class AsyncCrsfBridge {
private:
    io_context io_ctx;
    serial_port rx_port, fc_port;
    deadline_timer stats_timer;
    std::thread io_thread;
    
    // –ë—É—Ñ–µ—Ä–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è
    static constexpr size_t BUFFER_SIZE = 1024;
    std::vector<uint8_t> rx_buffer, fc_buffer;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    std::atomic<long> rx_to_fc_bytes{0}, fc_to_rx_bytes{0}, errors{0};
    std::atomic<bool> running{false};
    
    // Callbacks –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
    std::function<void(const std::string&)> error_callback;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ 420000 baud
    bool setup_custom_baud_420000(serial_port& port) {
        try {
            // –°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—Ä—Ç—É
            port.set_option(serial_port_base::baud_rate(38400)); // –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
            port.set_option(serial_port_base::character_size(8));
            port.set_option(serial_port_base::parity(serial_port_base::parity::none));
            port.set_option(serial_port_base::stop_bits(serial_port_base::stop_bits::one));
            port.set_option(serial_port_base::flow_control(serial_port_base::flow_control::none));
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Ç–∏–≤–Ω–∏–π handle –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            int fd = port.native_handle();
            
            struct serial_struct ss;
            if (ioctl(fd, TIOCGSERIAL, &ss) == 0) {
                ss.flags = (ss.flags & ~0x0030) | 0x0010;  // ASYNC_SPD_CUST
                ss.custom_divisor = ss.baud_base / 420000;
                
                if (ioctl(fd, TIOCSSERIAL, &ss) == 0) {
                    std::cout << "‚úÖ Custom baud 420000 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ" << std::endl;
                    return true;
                } else {
                    std::cout << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å 420000" << std::endl;
                    return false;
                }
            }
            return false;
            
        } catch (boost::system::system_error& e) {
            std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—É: " << e.what() << std::endl;
            return false;
        }
    }

public:
    AsyncCrsfBridge() 
        : rx_port(io_ctx), fc_port(io_ctx), stats_timer(io_ctx),
          rx_buffer(BUFFER_SIZE), fc_buffer(BUFFER_SIZE) {}
    
    ~AsyncCrsfBridge() {
        stop();
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –ø–æ–º–∏–ª–æ–∫
    void set_error_callback(std::function<void(const std::string&)> callback) {
        error_callback = callback;
    }
    
    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤
    bool connect() {
        try {
            std::cout << "üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ " << CRSF_BAUD << " baud..." << std::endl;
            
            // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—ñ–≤
            rx_port.open(RX_PORT);
            fc_port.open(FC_PORT);
            
            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è –æ–±–æ—Ö –ø–æ—Ä—Ç—ñ–≤
            if (!setup_custom_baud_420000(rx_port) || !setup_custom_baud_420000(fc_port)) {
                std::cout << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å" << std::endl;
                return false;
            }
            
            std::cout << "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ " << CRSF_BAUD << " baud" << std::endl;
            std::cout << "üì° Bridge: " << RX_PORT << " ‚Üî " << FC_PORT << std::endl;
            
            return true;
            
        } catch (boost::system::system_error& e) {
            std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: " << e.what() << std::endl;
            return false;
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ bridge
    bool start() {
        if (!connect()) {
            return false;
        }
        
        running = true;
        
        // –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è –∑ –æ–±–æ—Ö –ø–æ—Ä—Ç—ñ–≤
        start_rx_read();
        start_fc_read();
        
        // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        start_stats_timer();
        
        // –ó–∞–ø—É—Å–∫ IO –ø–æ—Ç–æ–∫—É
        io_thread = std::thread([this]() {
            try {
                io_ctx.run();
            } catch (std::exception& e) {
                std::cout << "‚ùå IO context error: " << e.what() << std::endl;
                if (error_callback) {
                    error_callback("IO context error: " + std::string(e.what()));
                }
            }
        });
        
        std::cout << "üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π bridge –∑–∞–ø—É—â–µ–Ω–æ!" << std::endl;
        return true;
    }
    
    // –ó—É–ø–∏–Ω–∫–∞ bridge
    void stop() {
        if (!running) return;
        
        running = false;
        
        // –ó—É–ø–∏–Ω–∫–∞ IO –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        io_ctx.stop();
        
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ—Ä—Ç—ñ–≤
        boost::system::error_code ec;
        if (rx_port.is_open()) {
            rx_port.cancel(ec);
            rx_port.close(ec);
        }
        if (fc_port.is_open()) {
            fc_port.cancel(ec);
            fc_port.close(ec);
        }
        
        // –ß–µ–∫–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è IO –ø–æ—Ç–æ–∫—É
        if (io_thread.joinable()) {
            io_thread.join();
        }
        
        std::cout << "‚èπÔ∏è –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π bridge –∑—É–ø–∏–Ω–µ–Ω–æ" << std::endl;
        print_final_stats();
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    int get_baud() const { return CRSF_BAUD; }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    void get_stats(long& rx_to_fc, long& fc_to_rx, long& error_count) const {
        rx_to_fc = rx_to_fc_bytes.load();
        fc_to_rx = fc_to_rx_bytes.load();
        error_count = errors.load();
    }

private:
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –∑ RX –ø–æ—Ä—Ç—É (USB1 ‚Üí USB0)
    void start_rx_read() {
        rx_port.async_read_some(
            buffer(rx_buffer),
            boost::bind(&AsyncCrsfBridge::handle_rx_read, this,
                placeholders::error,
                placeholders::bytes_transferred));
    }
    
    void handle_rx_read(const boost::system::error_code& error, size_t bytes_transferred) {
        if (!running) return;
        
        if (!error && bytes_transferred > 0) {
            // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–∏—Ö –≤—ñ–¥ RX –¥–æ FC (USB1 ‚Üí USB0)
            async_write(fc_port,
                buffer(rx_buffer, bytes_transferred),
                boost::bind(&AsyncCrsfBridge::handle_rx_write, this,
                    placeholders::error,
                    placeholders::bytes_transferred,
                    bytes_transferred));
            
        } else if (error) {
            handle_error("RX read", error);
        }
        
        // –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è
        if (running && rx_port.is_open()) {
            start_rx_read();
        }
    }
    
    void handle_rx_write(const boost::system::error_code& error, 
                        size_t bytes_written, size_t expected_bytes) {
        if (!error) {
            rx_to_fc_bytes += bytes_written;
            if (bytes_written != expected_bytes) {
                std::cout << "‚ö†Ô∏è RX‚ÜíFC: –∑–∞–ø–∏—Å–∞–Ω–æ " << bytes_written 
                          << " –∑ " << expected_bytes << " –±–∞–π—Ç" << std::endl;
            }
        } else {
            handle_error("RX write", error);
        }
    }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –∑ FC –ø–æ—Ä—Ç—É (USB0 ‚Üí USB1)
    void start_fc_read() {
        fc_port.async_read_some(
            buffer(fc_buffer),
            boost::bind(&AsyncCrsfBridge::handle_fc_read, this,
                placeholders::error,
                placeholders::bytes_transferred));
    }
    
    void handle_fc_read(const boost::system::error_code& error, size_t bytes_transferred) {
        if (!running) return;
        
        if (!error && bytes_transferred > 0) {
            // –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó –≤—ñ–¥ FC –¥–æ RX (USB0 ‚Üí USB1)
            async_write(rx_port,
                buffer(fc_buffer, bytes_transferred),
                boost::bind(&AsyncCrsfBridge::handle_fc_write, this,
                    placeholders::error,
                    placeholders::bytes_transferred,
                    bytes_transferred));
            
        } else if (error) {
            handle_error("FC read", error);
        }
        
        // –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è
        if (running && fc_port.is_open()) {
            start_fc_read();
        }
    }
    
    void handle_fc_write(const boost::system::error_code& error, 
                        size_t bytes_written, size_t expected_bytes) {
        if (!error) {
            fc_to_rx_bytes += bytes_written;
            if (bytes_written != expected_bytes) {
                std::cout << "‚ö†Ô∏è FC‚ÜíRX: –∑–∞–ø–∏—Å–∞–Ω–æ " << bytes_written 
                          << " –∑ " << expected_bytes << " –±–∞–π—Ç" << std::endl;
            }
        } else {
            handle_error("FC write", error);
        }
    }
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    void handle_error(const std::string& operation, const boost::system::error_code& error) {
        errors++;
        std::string error_msg = operation + " error: " + error.message();
        std::cout << "‚ùå " << error_msg << std::endl;
        
        if (error_callback) {
            error_callback(error_msg);
        }
        
        // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö –∑—É–ø–∏–Ω—è—î–º–æ bridge
        if (error == boost::asio::error::operation_aborted ||
            error == boost::asio::error::bad_descriptor) {
            std::cout << "üõë –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –∑—É–ø–∏–Ω–∫–∞ bridge..." << std::endl;
            stop();
        }
    }
    
    // –¢–∞–π–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    void start_stats_timer() {
        stats_timer.expires_from_now(boost::posix_time::seconds(5));
        stats_timer.async_wait(
            boost::bind(&AsyncCrsfBridge::handle_stats_timer, this,
                placeholders::error));
    }
    
    void handle_stats_timer(const boost::system::error_code& error) {
        if (!error && running) {
            print_stats();
            start_stats_timer(); // –ù–∞—Å—Ç—É–ø–Ω–∏–π –≤–∏–∫–ª–∏–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        }
    }
    
    void print_stats() {
        std::cout << "üìä RX‚ÜíFC: " << rx_to_fc_bytes.load() << " –±–∞–π—Ç | "
                  << "FC‚ÜíRX: " << fc_to_rx_bytes.load() << " –±–∞–π—Ç | "
                  << "–ü–æ–º–∏–ª–∫–∏: " << errors.load() << std::endl;
    }
    
    void print_final_stats() {
        std::cout << "\nüìã –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" << std::endl;
        std::cout << "   RX‚ÜíFC: " << rx_to_fc_bytes.load() << " –±–∞–π—Ç" << std::endl;
        std::cout << "   FC‚ÜíRX: " << fc_to_rx_bytes.load() << " –±–∞–π—Ç" << std::endl;
        std::cout << "   –ü–æ–º–∏–ª–∫–∏: " << errors.load() << std::endl;
    }
};

// –ü—Ä–æ—Å—Ç–∏–π –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º)
class SimpleVideoPlayer {
private:
    GstElement* playbin = nullptr;
    GMainLoop* loop = nullptr;
    std::atomic<bool> running{false};

    static gboolean bus_callback(GstBus* /*bus*/, GstMessage* message, gpointer data) {
        SimpleVideoPlayer* self = static_cast<SimpleVideoPlayer*>(data);
        
        switch (GST_MESSAGE_TYPE(message)) {
            case GST_MESSAGE_ERROR: {
                GError* err;
                gchar* debug;
                gst_message_parse_error(message, &err, &debug);
                std::cout << "‚ùå Video Error: " << err->message << std::endl;
                g_main_loop_quit(self->loop);
                g_error_free(err);
                g_free(debug);
                break;
            }
            case GST_MESSAGE_STATE_CHANGED:
                if (GST_MESSAGE_SRC(message) == GST_OBJECT(self->playbin)) {
                    GstState old_state, new_state;
                    gst_message_parse_state_changed(message, &old_state, &new_state, nullptr);
                    if (new_state == GST_STATE_PLAYING) {
                        std::cout << "üé¨ –í—ñ–¥–µ–æ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è!" << std::endl;
                    }
                }
                break;
            default:
                break;
        }
        return TRUE;
    }

public:
    bool start(const std::string& uri) {
        std::cout << "üé¨ –ó–∞–ø—É—Å–∫ –≤—ñ–¥–µ–æ..." << std::endl;
        
        playbin = gst_element_factory_make("playbin", "player");
        if (!playbin) return false;
        
        g_object_set(G_OBJECT(playbin), "uri", uri.c_str(), nullptr);
        
        GstBus* bus = gst_element_get_bus(playbin);
        gst_bus_add_watch(bus, bus_callback, this);
        gst_object_unref(bus);
        
        GstStateChangeReturn ret = gst_element_set_state(playbin, GST_STATE_PLAYING);
        if (ret == GST_STATE_CHANGE_FAILURE) return false;
        
        running = true;
        loop = g_main_loop_new(nullptr, FALSE);
        return true;
    }
    
    void run() {
        if (loop && running) {
            g_main_loop_run(loop);
        }
    }
    
    void stop() {
        running = false;
        if (playbin) {
            gst_element_set_state(playbin, GST_STATE_NULL);
            gst_object_unref(playbin);
            playbin = nullptr;
        }
        if (loop) {
            g_main_loop_quit(loop);
            g_main_loop_unref(loop);
            loop = nullptr;
        }
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è signal handler
static AsyncCrsfBridge* global_bridge = nullptr;
static SimpleVideoPlayer* global_player = nullptr;

void signal_handler(int /*signal*/) {
    std::cout << "\nüõë –ó—É–ø–∏–Ω–∫–∞..." << std::endl;
    if (global_bridge) global_bridge->stop();
    if (global_player) global_player->stop();
    exit(0);
}

int main(int argc, char* argv[]) {
    gst_init(&argc, &argv);
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);
    
    std::cout << "üåâ ASYNC CRSF BRIDGE (Boost.Asio)" << std::endl;
    std::cout << "=====================================" << std::endl;
    std::cout << "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:" << std::endl;
    std::cout << "  RX Input:  " << RX_PORT << std::endl;
    std::cout << "  FC Output: " << FC_PORT << std::endl;
    std::cout << "  –ù–∞–ø—Ä—è–º–æ–∫: USB1 ‚Üî USB0 (–¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π)" << std::endl;
    std::cout << "  –®–≤–∏–¥–∫—ñ—Å—Ç—å: " << CRSF_BAUD << " baud (CRSF –∫–∞—Å—Ç–æ–º–Ω–∞)" << std::endl;
    std::cout << "  –í—ñ–¥–µ–æ: " << RTSP_URL << std::endl << std::endl;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤
    struct stat buffer;
    if (stat(RX_PORT.c_str(), &buffer) != 0) {
        std::cout << "‚ùå " << RX_PORT << " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" << std::endl;
        return 1;
    }
    if (stat(FC_PORT.c_str(), &buffer) != 0) {
        std::cout << "‚ùå " << FC_PORT << " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" << std::endl;
        return 1;
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ bridge
    AsyncCrsfBridge bridge;
    global_bridge = &bridge;
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è callback –¥–ª—è –ø–æ–º–∏–ª–æ–∫
    bridge.set_error_callback([](const std::string& error) {
        std::cout << "üî• Bridge Error: " << error << std::endl;
    });
    
    if (!bridge.start()) {
        std::cout << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ bridge" << std::endl;
        return 1;
    }
    
    // –ó–∞–ø—É—Å–∫ –≤—ñ–¥–µ–æ–ø–ª–µ—î—Ä–∞
    SimpleVideoPlayer player;
    global_player = &player;
    
    if (!player.start(RTSP_URL)) {
        std::cout << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–µ–æ" << std::endl;
        bridge.stop();
        return 1;
    }
    
    std::cout << "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –Ω–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ " << bridge.get_baud() << " baud!" << std::endl;
    std::cout << "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥" << std::endl;
    std::cout << "üéØ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑ Boost.Asio" << std::endl;
    std::cout << "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏" << std::endl << std::endl;
    
    // –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª (GStreamer)
    player.run();
    
    // –û—á–∏—â–µ–Ω–Ω—è
    bridge.stop();
    player.stop();
    
    return 0;
}